⚠️ Attention:
You must approach this task with extreme attention to detail, rigorous analytical thinking, and meticulous verification at every single step. Before finalizing your response:

1. Explicit Step-by-Step Reasoning:
   - Clearly articulate each step of your thought process.
   - Justify every decision, choice, and conclusion explicitly.

2. Continuous Internal Validation:
   - Verify each intermediate step for logical coherence, consistency, and correctness.
   - Internally cross-check assumptions, methods, and intermediate results for accuracy.

3. Proactive Error Prevention:
   - Anticipate potential pitfalls, oversights, edge-cases, and subtle errors.
   - Explain proactively how you've addressed and mitigated each identified risk.

4. Comprehensive Cross-Verification:
   - Cross-validate your final outputs thoroughly, ensuring all parts align perfectly.
   - Demonstrate explicitly how this validation process was carried out.

5. Transparency of Uncertainty:
   - Explicitly highlight any uncertainties, ambiguities, or areas requiring further clarification or external verification.
   - Provide clear recommendations on resolving these uncertainties.

6. Structured Verification Summary:
   - Conclude with a concise, structured summary confirming your verification steps, outcomes, and confidence levels explicitly.

Under no circumstances:
- Rely on assumptions, guesses, or shortcuts.
- Compromise accuracy or detail for speed.

Your primary goal is absolute correctness, clarity, and completeness.

───────────────────────────────────────────────────────────────────────────────

🧬 MLB Pipeline Canonical Module Build Prompt

ATTENTION:
You are a world-class Python ML pipeline architect and codebase QA specialist.
Your task is to design and implement the module: [MODULE_NAME] for a production-grade, modular, daily-updating MLB Player-Performance Prediction Pipeline.
All project documentation, specs, and design files are provided in a single ZIP archive attached to this session.
You must treat this ZIP as the single source of truth for all requirements, context, and references.

───────────────────────────────────────────────────────────────────────────────

📚 CONTEXT & REQUIREMENTS

Pipeline Scope:
- End-to-end, modular, config-driven, CLI-executed MLB player prediction system, daily batch and on-demand runs.

Reference Docs:
You MUST conform precisely to all of the following, as found in the ZIP:
- Global Architecture & Design Spec.txt
- MLB Player‑Performance Prediction Pipeline – Canonical Architecture.txt
- MLB Player‑Performance Prediction Pipeline – Final Architecture Blueprint.txt
- Module-by-Module Build Plan.txt
- MLB Player-Performance Pipeline – Global Design Specification.txt
- MLB Player-Performance Pipeline Rebuild.pdf
- MLB Player-Performance Pipeline – Code Audit and Debug Strategy.pdf
- MLB Pipeline Debug & Refactor Report.pdf
- Master_prompt.txt
- Any other file included in the uploaded ZIP — review EVERY document for constraints, implementation patterns, and edge-case handling.

MUST:
- Reference the module contract and requirements from Module-by-Module Build Plan.txt
- Pull config structure, I/O schema, CLI, and error logic ONLY from these specs — never hallucinate structure
- If ambiguity exists, reconcile across all files in the ZIP and explicitly list any assumptions made

───────────────────────────────────────────────────────────────────────────────

⚙️ MODULE REQUIREMENTS

1. Config, CLI, and Overwrite Policy

Always use:
    from utils.config import load_config
    cfg = load_config()

- All keys must match canonical YAML structure
- Enforce overwrite policy via:
    from utils.cli_utils import apply_cli_overrides, resolve_output_path
    cfg = apply_cli_overrides(cfg)
    output_path = resolve_output_path(cfg['outputs']['[YOUR OUTPUT KEY]'], cfg)

Overwrite logic:
- error: fail if output exists
- warn: skip and log
- force: overwrite and log

2. Logging

Detect logger file and import accordingly:
- If utils/global_conventions.py exists:
    from utils.global_conventions import get_rotating_logger
- If utils/logging_utils.py exists:
    from utils.logging_utils import get_rotating_logger

If ensure_dir() is not defined in the logger file, inject:
    def ensure_dir(path: Path):
        path.mkdir(parents=True, exist_ok=True)

Required logs:
- Start/end
- CLI args
- Config path
- Files read/written
- Record counts
- Overwrite mode
- Schema/logic errors

3. I/O & Schema

- Use pyarrow for all outputs unless input is legacy CSV
- All input/output paths must resolve from cfg keys
- Validate schema before saving
- Do not hardcode filenames

4. Error Handling & Robustness

- Catch: FileNotFoundError, schema mismatch, CLI misuse, config key errors
- Log all errors with actionable messages
- Assert row counts and key column presence before/after merges

5. Unit Tests

- Must be in: tests/test_[MODULE_NAME].py
- Add pytest.ini to project root:
    [pytest]
    pythonpath = .

Tests must include:
- Valid path
- Missing file
- Schema mismatch
- Overwrite modes
- Full CLI run
- Run via: PYTHONPATH=. pytest -v

6. Code Style & Structure

- PEP8, black-compatible
- Path().resolve() for all file paths
- No inline config
- Docstrings on every function

7. CI & Integration

- Include if __name__ == "__main__"
- Log completion and final output path
- Compatible with GitHub CI using pytest

───────────────────────────────────────────────────────────────────────────────

🔬 DELIVERABLES

1. [MODULE_NAME].py
    - Full CLI-ready Python module

2. tests/test_[MODULE_NAME].py
    - Full pytest suite with fixtures or mocks

3. Summary Table
    - Config keys
    - Output file(s)
    - CLI args
    - Logging actions
    - Assumptions made

4. Example Usage:
    python [MODULE_NAME].py --config-path config.yaml --overwrite-policy force

5. Logging Overview
    - Logs paths, args, errors, record counts, overwrite status, final output

───────────────────────────────────────────────────────────────────────────────

🛡️ FINAL VALIDATION CHECKLIST

Before returning your response, ensure:

- [ ] Correct logger import used (logging_utils or global_conventions)
- [ ] ensure_dir() is present or injected
- [ ] Config paths match schema from ZIP
- [ ] CLI works with --config-path and --overwrite-policy
- [ ] pytest -v passes from root with PYTHONPATH=.
- [ ] All output paths and schemas match canonical spec
- [ ] All tests are functional, complete, and modular
- [ ] You have flagged and documented any ambiguity or edge case explicitly

───────────────────────────────────────────────────────────────────────────────

Now: Build [MODULE_NAME] exactly as described, grounded ONLY in the ZIP's specifications — with zero hallucination, perfect naming, complete logging, full test coverage, and GitHub-ready delivery.
