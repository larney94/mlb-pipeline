**‚ö†Ô∏è Attention:**
You must approach this task with **extreme attention to detail, rigorous analytical thinking, and meticulous verification** at every single step. Before finalizing your response:

1. **Explicit Step-by-Step Reasoning:**
   * Clearly articulate each step of your thought process.
   * Justify every decision, choice, and conclusion explicitly.

2. **Continuous Internal Validation:**
   * Verify each intermediate step for logical coherence, consistency, and correctness.
   * Internally cross-check assumptions, methods, and intermediate results for accuracy.

3. **Proactive Error Prevention:**
   * Anticipate potential pitfalls, oversights, edge-cases, and subtle errors.
   * Explain proactively how you've addressed and mitigated each identified risk.

4. **Comprehensive Cross-Verification:**
   * Cross-validate your final outputs thoroughly, ensuring all parts align perfectly.
   * Demonstrate explicitly how this validation process was carried out.

5. **Transparency of Uncertainty:**
   * Explicitly highlight any uncertainties, ambiguities, or areas requiring further clarification or external verification.
   * Provide clear recommendations on resolving these uncertainties.

6. **Structured Verification Summary:**
   * Conclude with a concise, structured summary confirming your verification steps, outcomes, and confidence levels explicitly.

**Under no circumstances:**
* Rely on assumptions, guesses, or shortcuts.
* Compromise accuracy or detail for speed.

**Your primary goal is absolute correctness, clarity, and completeness.**

---

# üß¨ MLB Pipeline Canonical Module Build Prompt

> **ATTENTION:**  
> You are a world-class Python ML pipeline architect and codebase QA specialist.  
> Your task is to **design and implement** the module: `[MODULE_NAME]` for a production-grade, modular, daily-updating MLB Player-Performance Prediction Pipeline.  
> **All project documentation, specs, and design files are provided in a single ZIP archive attached to this session.**  
> **You must treat this ZIP as the single source of truth for all requirements, context, and references.**

---

## üìö CONTEXT & REQUIREMENTS

- **Pipeline Scope:** End-to-end, modular, config-driven, CLI-executed MLB player prediction system, daily batch and on-demand runs.
- **Reference Docs:** You MUST conform precisely to all of the following, as found in the ZIP:
    - `Global Architecture & Design Spec.txt`
    - `MLB Player‚ÄëPerformance Prediction Pipeline ‚Äì Canonical Architecture.txt`
    - `MLB Player‚ÄëPerformance Prediction Pipeline ‚Äì Final Architecture Blueprint.txt`
    - `Module-by-Module Build Plan.txt`
    - `MLB Player-Performance Pipeline ‚Äì Global Design Specification.txt`
    - `MLB Player-Performance Pipeline Rebuild.pdf`
    - `MLB Player-Performance Pipeline ‚Äì Code Audit and Debug Strategy.pdf`
    - `MLB Pipeline Debug & Refactor Report.pdf`
    - `Master_prompt.txt`
    - **Any other file included in the uploaded ZIP‚Äî**review EVERY document for constraints, implementation patterns, and edge-case handling.

**MUST:**  
- Directly reference the module contract and requirements from `Module-by-Module Build Plan.txt` (from the ZIP).
- Pull config structure, I/O schema, CLI, and error logic ONLY from these specs‚Äî**never hallucinate structure.**
- If you find ambiguity, reconcile across all files in the ZIP and **explicitly list any assumptions made.**

---

## ‚öôÔ∏è MODULE REQUIREMENTS

### 1. Config, CLI, and Overwrite Policy

- **Config:** Always use:
    ```python
    from utils.config import load_config
    cfg = load_config()
    ```
    - Access config with robust error handling.
    - All keys, inputs, and outputs must match the canonical design in the ZIP.
    - If config example is missing, deduce ONLY by referencing other modules in the ZIP.

- **CLI:**  
    - Must use `argparse` or the project‚Äôs standardized CLI utility (`typer` if specified).
    - Must accept at least: `--config-path` (YAML), `--overwrite-policy` (`error|warn|force`).
    - Must call:
        ```python
        from utils.cli_utils import apply_cli_overrides, resolve_output_path
        cfg = apply_cli_overrides(cfg)
        output_path = resolve_output_path(cfg['outputs']['[YOUR OUTPUT KEY]'], cfg)
        ```
    - Enforce overwrite policy strictly, matching project logic:
        - `error`: fail if output exists
        - `warn`: skip, log warning
        - `force`: overwrite

### 2. Logging

- Use rotating logger as described in `global_conventions.py`:
    ```python
    from utils.global_conventions import get_rotating_logger
    LOGGER = get_rotating_logger('[MODULE_NAME]')
    ```
- Log: start/end, CLI args, config path, every file read/written (with resolved absolute path), number of records processed, and ALL error conditions.
- Ensure logs are immediately actionable for debugging and CI.

### 3. I/O & Schema

- **File Types:**  
    - Parquet (`pyarrow`) for all main outputs, unless legacy input (CSV).
    - Do NOT hardcode paths; resolve from config only.
    - Match ALL input/output schema exactly to blueprint and audit docs from the ZIP.
    - Validate that outputs match expected columns and dtypes. Fail early and clearly on mismatch.

- **Interim Data:**  
    - Save and log any major interim result files as specified.

### 4. Error Handling & Robustness

- Defensive against missing files, malformed config, schema mismatch, file overwrite, or bad CLI params.
- Catch and log all exceptions with actionable error messages.
- Assert every output and log assertion results.

### 5. Unit Tests

- Place tests in `tests/test_[MODULE_NAME].py`:
    - Use `pytest`
    - Test all functions, main CLI run, and edge cases (empty data, bad config, file already exists, etc.)
    - Mock or use fixtures for file and config I/O
    - Must pass with `pytest -v`
    - Cover >90% of module logic

### 6. Code Style & Structure

- 100% PEP8, readable, clear separation of concerns.
- No side effects, no in-line config or path assumptions.
- All functions/classes have concise, informative docstrings.
- Use `Path().resolve()` for all file path manipulations.

### 7. CI & Integration Readiness

- Include `if __name__ == "__main__":` CLI entry.
- Print/log ‚Äúsuccess‚Äù and output file locations on completion.
- Test code is ready for GitHub CI (`pytest`) as described in pipeline QA specs.

---

## üî¨ DELIVERABLES

### ‚¨áÔ∏è Your response must provide, in this order:

1. **Full `[MODULE_NAME].py` code block**  
    - End-to-end, ready to drop into the codebase, run as a CLI, with no missing imports or stubs.

2. **Full `tests/test_[MODULE_NAME].py` test suite**  
    - With enough dummy config/fixtures to demonstrate pass/fail for all major logic branches.

3. **Summary table** of:
    - All config keys accessed (with YAML path as dotted key, e.g., `inputs.gamelogs_csv`)
    - All outputs produced (with full path as would be in config)
    - All CLI flags accepted
    - All logging actions performed
    - Any design assumptions made, if unavoidable

4. **Short ‚ÄúHow to Run‚Äù usage example**, e.g.:
    ```bash
    python [MODULE_NAME].py --config-path config.yaml --overwrite-policy force
    ```

5. **Short ‚ÄúWhat gets logged‚Äù description** for QA.

---

## üõ°Ô∏è FINAL VALIDATION (REQUIRED, DO NOT SKIP)

**Before returning your answer:**

- Review ALL supplied documents in the uploaded ZIP for context or nuance you may have missed.
- Check that config usage, I/O, logging, error handling, and test logic match global patterns.
- Double-check every output path and schema for consistency.
- Confirm `pytest` will run without additional setup or missing fixtures.
- Confirm CLI usage instructions and docstrings are clear and accurate.
- Confirm that your module and tests are self-contained and reproducible in isolation.
- **Flag any potential edge-case or ambiguity for review**; do not make hidden assumptions.

Respond only when you are 100% confident the code is production-ready and in perfect alignment with all specs.

---

**Now: Build `[MODULE_NAME]` according to the above, referencing ONLY the documentation, specs, and context found in the uploaded ZIP, with absolutely no omitted detail.**
