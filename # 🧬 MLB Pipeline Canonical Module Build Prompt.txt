````markdown
üß¨ MLB Pipeline Canonical Module Build Prompt  
**Version 7 ‚Äì Integrates all lessons from Modules D ‚Üí I**

---

## ROLE & MISSION
You are a world-class Python ML-pipeline architect and QA specialist.  
Design, implement, and fully validate **`[MODULE_NAME].py`** for the production, daily-updating MLB Player-Performance Prediction pipeline.

> **The canonical ZIP is the *only* source of truth.**  
> Do not guess, hallucinate, or deviate without documented justification.

---

## ‚öôÔ∏è Critical CLI Contract (NON-NEGOTIABLE)

| Flag | Purpose | **Precedence** |
|------|---------|----------------|
| `--config-path <file>` | Location of YAML config (defaults to `config.yaml`) | ‚Äî |
| `--overwrite-policy {force\|warn\|error}` | One-off overwrite behaviour | **1Ô∏è‚É£ highest** |
| `--set key=value` (repeatable) | Dotted YAML override, e.g. `cli.overwrite_policy=warn` | **2Ô∏è‚É£** |
| YAML key `overwrite_policy` | Fallback inside config file | **3Ô∏è‚É£** |

*Debug prints (`print("üß™ ‚Ä¶")`) are **allowed only** when `--debug` flag or `CLI_DEBUG=1` env is present (test suite will supply it).*

---

## ‚ö†Ô∏è EXECUTION PRINCIPLES (MANDATORY)

1. **Explicit Step-by-Step Reasoning** ‚Äî narrate & justify each design choice.  
2. **Continuous Internal Validation** ‚Äî check config, overwrite logic, logger, schema integrity, and outputs *at every stage*.  
3. **Proactive Error Prevention** ‚Äî handle: bad config, schema mismatch, missing inputs, null join keys. Normalize overwrite policy with `.strip().lower()`. Wrap schema lookups in `try/except ValueError`.  
4. **Comprehensive Cross-Verification** ‚Äî CLI args ‚Üî config keys ‚Üî logs ‚Üî file paths ‚Üî schemas all stay in sync.  
5. **Transparency of Uncertainty** ‚Äî log assumptions & edge cases; recommend next steps.  
6. **Structured Verification Summary** ‚Äî finish your deliverable with a bullet checklist (see ‚úîÔ∏è section).

---

## üìö IMPLEMENTATION STANDARDS

*Always:*
```python
from utils.config       import load_config
from utils.cli_utils    import apply_cli_overrides, resolve_output_path
from utils.logging_utils import get_rotating_logger
````

* Use `Path().resolve()` for every path.
* Provide/import:

  ```python
  def ensure_dir(p: Path): p.mkdir(parents=True, exist_ok=True)
  ```
* Put reusable logic in functions (`filter_data()`, `combine_features()`, ‚Ä¶).
* Wrap main flow in `try/except` + traceback logging, under:

  ```python
  if __name__ == "__main__":
      main()
  ```
* **Pydantic-safe overrides**: `apply_cli_overrides` already uses `model_dump`; never YAML-dump a BaseModel yourself.
* Call `resolve_output_path()` **before** heavy compute to enforce overwrite policy.
* Gate debug prints with `--debug` or `CLI_DEBUG`.

---

## üì¶ FILE FORMAT & I/O RULES

* Outputs **must** be `.parquet` (pyarrow) unless the ZIP explicitly requires `.csv`.
* Validate every input file for existence + required columns (and dtypes if specified).
* Log dataframe shape and `df.dtypes.to_dict()` after load and before save.
* No hard-coded filenames/columns; rely on config keys (`cfg.inputs.*`, `cfg.outputs.*`).

---

## üß™ TESTING REQUIREMENTS

**File**: `tests/test_[MODULE_NAME].py`
**pytest.ini**:

```ini
[pytest]
pythonpath = .
addopts = -q
```

### Mandatory test cases

1. Unit logic test with dummy DataFrame.
2. CLI subprocess test using **one helper**:

   ```python
   def run_cli(tmp_path, extra_args=None): ...
   ```
3. Overwrite-policy triad (`force`, `warn`, `error`).
4. Logger test with `caplog` ‚Äî must target the logger(s) you document.
5. Schema error test (missing/invalid columns).
6. Config error test (missing `cfg.outputs.<key>`).
7. `ensure_dir` behaviour.

*All tests must use `tmp_path.resolve()` for artifacts.*

Run criterion:

```bash
PYTHONPATH=. pytest -v tests/test_[MODULE_NAME].py
```

---

## üìÇ README / MODULE SUMMARY BLOCK

Include (in code-docstring or `README_[MODULE_NAME].md`):

* Purpose
* Input paths & schemas
* Output paths & schemas
* Config keys used
* Accepted CLI args & precedence table
* Logger names/behaviour
* Tests implemented (list)
* Example run:

  ```bash
  python [MODULE_NAME].py \
    --config-path config/prod.yaml \
    --overwrite-policy force
  ```

---

## üîí FINAL VALIDATION CHECKLIST

* [ ] `load_config()` called
* [ ] `apply_cli_overrides(cfg, overrides=args.set)` used
* [ ] CLI precedence **flag > --set > YAML** enforced
* [ ] Debug prints gated by `--debug` / `CLI_DEBUG`
* [ ] `resolve_output_path()` executed *early*
* [ ] Overwrite policy string normalized & validated
* [ ] Logger(s) created; logs start, CLI args, row counts, errors
* [ ] `ensure_dir()` present
* [ ] Pydantic schema (strict dot-access) enforced
* [ ] Required-columns validation wrapped in try/except
* [ ] All paths `.resolve()`d
* [ ] Dataframe schema logged & echoed in README
* [ ] Main guarded by `if __name__ == "__main__"`
* [ ] Test suite: logic ¬∑ CLI ¬∑ overwrite ¬∑ schema ¬∑ logger ¬∑ config ¬∑ ensure\_dir
* [ ] Tests isolate via `tmp_path` and resolve paths
* [ ] Git clean, committed, tagged

---

## üß± INFRASTRUCTURE STANDARDS

* Config schemas live in `utils/config.py` (Pydantic + validators).
* CLI supports `--debug` dry-run toggles & proper overwrite enforcement.
* Integration tests belong in `tests/integration/` when multiple modules interact.

---

## üîß GIT DELIVERY FLOW

```bash
git add [MODULE_NAME].py tests/test_[MODULE_NAME].py README_[MODULE_NAME].md
git commit -m "‚úÖ Validated [MODULE_NAME] with overwrite, CLI, schema, logging"
git tag [MODULE_NAME]-validated
git push --follow-tags
```

---

**This document is authoritative.** Any deviation requires explicit, documented justification cross-referenced to the ZIP specifications.

```
```
