# 🧬 MLB Prediction Pipeline Execution Blueprint (v2.1 – Gold‑Standard, QA‑Verified)

> **All improvements, fixes, and enhancements fully integrated**
>
> *Back‑reference literals are now double‑escaped, and each new feature is mapped to a concrete phase deliverable.*

---

## ✅ OVERVIEW & PHASE GATES

| Phase | Branch            | Goal (checkpoint to advance)                                |
| ----- | ----------------- | ----------------------------------------------------------- |
| 1     | `refactor/core`   | Code refactor & contract alignment (`.phase_status.yaml` ✅) |
| 2     | `refactor/config` | Config & schema reinforcement (all keys validated)          |
| 3     | `validate/dryrun` | Dry‑run DAG + visual plan renders, zero execution           |
| 4     | `run/live`        | Real data execution with schema/hash contracts              |
| 5     | `qa/testsuite`    | 100 % tests green, coverage ≥ 95 %, isolated IO             |
| 6     | `release/v1.0.0`  | CI freeze, tag, dependency lock + SHA integrity             |

---

## 1️⃣ PHASE 1 — Code Refactor & Contract Alignment

### 🎯 Goal

Eliminate architectural drift: dot‑style config, `main(cfg)`, no `.get()`, executor fix, overwrite‑policy enum.

### 📋 Task Matrix (updated)

| Task                                              | Files                      | Tool / Fix                                         | Risk if Skipped           |
| ------------------------------------------------- | -------------------------- | -------------------------------------------------- | ------------------------- |
| Replace `cfg[…]` → dot access (edge‑safe)         | A–L, tests                 | **AST rewrite via libcst** (handles keys with `]`) | Regex miss, corrupt code  |
| Change `main()` to `main(cfg)`                    | A–L                        | manual/script                                      | Orchestrator import fails |
| Remove `.get()` on Pydantic                       | E, L                       | `getattr(cfg, 'x', None)`                          | Runtime bug               |
| Fix ThreadPool executor loop                      | pipeline.py                | explicit futures list                              | Deadlocks, skipped tasks  |
| **Add `--legacy-executor` fallback**              | pipeline.py                | retain ThreadPoolExecutor if Prefect down          | Agent outage halts run    |
| Enforce overwrite\_policy enum                    | pipeline.py                | raise on invalid                                   | Unsafe overwrite          |
| Replace `cfg.outputs.dir` with `cfg.outputs.root` | K, L                       | pathlib join                                       | Wrong paths               |
| Add Pydantic `protected_namespaces=()`            | utils/config.py            | suppress namespace warning                         | Noisy logs                |
| **Drop Module J placeholder from DAG builder**    | pipeline.py / Prefect flow | skip list or dummy task                            | Runtime error             |
| **Write `.phase_status.yaml` (schema‑validated)** | —                          | use `phase_status.PydanticModel`                   | CI cannot parse status    |
| **AST/Regex Safe‑check CI job**                   | .github/workflows          | run after refactor                                 | Prevents mis‑replacement  |

\----------------------------------------------------|-------------|----------------------------------------|---------------------------------|
\| Replace `cfg[…]` → dot access                      | A–L, tests  | regex                                   | Pydantic fail, KeyError         |
\| Change `main()` to `main(cfg)`                     | A–L         | manual/script                           | Orchestrator import fails       |
\| Remove `.get()` on Pydantic                        | E, L        | `getattr(cfg, 'x', None)`               | Runtime bug                     |
\| Fix ThreadPool executor loop                       | pipeline.py | explicit futures list                   | Deadlocks, skipped tasks        |
\| Enforce overwrite\_policy enum                      | pipeline.py | raise on invalid                        | Unsafe overwrite                |
\| Replace `cfg.outputs.dir` with `cfg.outputs.root`  | K, L        | pathlib join                            | Wrong paths                     |
\| Add Pydantic `protected_namespaces=()`             | utils/config.py | suppress namespace warning          | Noisy logs                      |
\| **Write `.phase_status.yaml`**                     | —           | util helper                             | Gate to Phase 2                 |

### 🔍 Safe Regex (escaped back‑refs)

```regex
cfg\[(['"])([^'"\]]+)\1\] → cfg.\2
cfg\.get\((['"][^'"]+['"])\) → getattr(cfg, \1)
```

---

## 2️⃣ PHASE 2 — Config & Schema Reinforcement

### 🔑 Required Keys (excerpt)

```yaml
inputs:
  consolidated_data: outputs/consolidated/merged.parquet
outputs:
  root: outputs
  consolidated_gamelogs_path: outputs/consolidated/gamelogs.parquet
  filtered_gamelogs_path: outputs/filtered/filtered.parquet
  combined_preds_dir: outputs/ensemble
llm:
  prompt_template: templates/llm_prompt.jinja2
schema_version: 1  # bump requires migration script + test
```

### 🛠 New Utilities

* `utils/config_validation.py::validate_config_keys_case_sensitive()` (ignores `experimental_*` keys)
* `schemas/` folder with baseline JSON Schemas
* **`phase_status.py`**: Pydantic model + JSON‑Schema for `.phase_status.yaml` (`phase`, `status`, `timestamp`, `git_sha`, `validator`)
* **Retention policy**: `utils/cleanup.py` removes artefacts >90 days or moves to S3 bucket.

---

## 3️⃣ PHASE 3 — Dry‑Run Pipeline Validation

### 🖥 Command

```bash
PYTHONPATH=. python pipeline.py \
  --modules A,B,C,D,E,F,G,H,I,K,L \
  --concurrency 2 \
  --overwrite-policy warn \
  --dry-run --visual
```

### 🗺 Deliverables

* `pipeline_<ts>.log` (all PLANNED, **no `main(cfg)` calls** verified)
* `dag_plan.dot` + `dag_plan.svg` (Module J absent)
* Streamlit dashboard launched **(port auto‑select unless `--dashboard-port`)**
* Warning if both CLI `--concurrency` and Prefect `task_concurrency` set (defines precedence)

---

## 4️⃣ PHASE 4 — Real Data Execution (Prefect Flow)

### 🔄 Execution

```bash
PYTHONPATH=. python pipeline.py \
  --modules A,B,C,D,E,F,G,H,I,K,L \
  --prefect \
  --overwrite-policy warn \
  --concurrency 2 \  # ignored if Prefect active; warning emitted
  --llm-batch-size 8
```

If Prefect agent unreachable → fallback to `--legacy-executor` path automatically.

Each Prefect task writes output + schema + SHA, registers with DVC/lakeFS, and respects retention policy.

Module I logs MAE, RMSE, PSI drift metrics to Prometheus with labels (`model_version`, `run_id`, `metric_type`). Alert fires if metric crosses threshold.

---

## 5️⃣ PHASE 5 — Test Battery & QA

### 🧪 Run

```bash
PYTHONPATH=. pytest -v --tb=short -m "not live" \
  --cov=. --cov-fail-under=95 \
  --basetemp=outputs/test/
```

All tests tagged with `@pytest.mark.phaseN`. Live API tests separated behind `-m live` flag.

### 🚫 Isolation Guard

CI fails if any file is written outside `outputs/test/` during unit tests.

---

## 6️⃣ PHASE 6 — CI Freeze & Release Tag

### 📌 Commands

```bash
pip freeze > requirements-freeze.txt
sha256sum requirements-freeze.txt > requirements.sha256
git add . && git commit -S -m "🧬 Release: MLB pipeline v1.0.0"
git tag -s v1.0.0 -m "MLB pipeline stable release"
git push origin main --tags
```

---

## ✨ ENHANCEMENT STRATEGIES (Phase‑Integrated & QA‑Hardened)

| # | Upgrade                   | Phase Hook | Deliverable                               | Extra Guard                        |
| - | ------------------------- | ---------- | ----------------------------------------- | ---------------------------------- |
| 1 | Data Contracts            | 2, 4, 5    | JSON schema validation, abort on mismatch | `jsonschema` lint step in CI       |
| 2 | Prefect Orchestration     | 3, 4       | Prefect flow, DAG UI, retry policies      | Auto‑fallback to legacy executor   |
| 3 | Data Versioning           | 4, 6       | DVC/lakeFS commits per artifact           | Credential check before run        |
| 4 | Drift Monitoring          | 4, 5       | Metrics → Prometheus, alert rules         | Standardized metric names & labels |
| 5 | Visual Dashboard          | 3, 4       | Graphviz + Streamlit status board         | Port auto‑select & CLI override    |
| 6 | Artefact Retention        | 4, 6       | `cleanup.py` cron job                     | Prevent disk bloat                 |
| 7 | Schema‑Version Governance | 2, 5       | Migration script & tests required on bump | Hard‑fail CI if unsatisfied        |

---

## 🧠 SYSTEM-WIDE ALIGNMENT SNAPSHOT

### 🗺️ Module-Level I/O & Runtime Map

Each module A–L performs a deterministic transformation with fixed input/output alignment:

| Module | Role                   | Inputs                                 | Outputs                                 | Downstream Use                           |
| ------ | ---------------------- | -------------------------------------- | --------------------------------------- | ---------------------------------------- |
| A      | Gamelogs ingest        | year/season                            | batting/pitching CSVs                   | D (via cfg.inputs.recent\_gamelogs\_csv) |
| B      | Static CSV downloader  | static\_csvs\[]                        | static/\*.csv                           | C (context builder)                      |
| C      | Contextual merge       | B outputs                              | context\_features.parquet               | D + H (naming conflict risk)             |
| D      | Combine all data       | A, B, C                                | full\_feature\_set.parquet              | F + possibly H                           |
| E      | Starter fetch (MLB)    | date                                   | starters\_DATE.csv                      | (not used elsewhere)                     |
| F      | Filtered dataset       | D.parquet                              | filtered\_gamelogs.parquet              | G (model inputs)                         |
| G      | Combine predictions    | I + legacy model                       | ensemble\_predictions.parquet           | L                                        |
| H      | Compute z-scores, etc. | D.parquet or inputs.consolidated\_data | context\_features.parquet               | I                                        |
| I      | Model predict          | H outputs + model                      | model\_predictions.parquet              | G                                        |
| K      | Pinnacle API call      | API creds                              | true\_lines\_DATE.csv                   | L                                        |
| L      | LLM insights           | G + K + prompt                         | llm\_predictions.csv + explanations.txt | —                                        |

---

### ⚠️ Known Alignment Risks

| Risk                                                  | Impact               | Modules     | Fix                                                 |
| ----------------------------------------------------- | -------------------- | ----------- | --------------------------------------------------- |
| Duplicate output path: context\_features.parquet      | Overwrite bug        | C, H        | Versioned paths or split into `*_base`, `*_derived` |
| Module E is orphaned                                  | Wasted runtime       | E           | Integrate into D or document skip                   |
| J expected in flow                                    | Runtime fail         | pipeline.py | Drop from DAG or insert dummy node                  |
| Naming: combined\_preds\_dir vs ensemble\_predictions | Schema mismatch risk | G, L        | Normalize in config + rename keys                   |
| LLM prompt version drift                              | Misaligned outputs   | L           | Add `prompt_version` to config + SHA log            |

---

### 🔄 Runtime Dataflow Summary

```mermaid
graph TD
  A --> D
  B --> C --> D
  D --> F --> G --> L
  H --> I --> G
  K --> L
```

---

### 🔐 Execution Invariants

* Every module uses `main(cfg)` (not `main()`)
* All config access must use dot-style (no `cfg[...]`, no `.get()`)
* All outputs must:

  * Write to config-specified path
  * Include schema (`.schema.json`) + hash (`.sha256`)
  * Respect overwrite policy from CLI or YAML
* Module J must be explicitly skipped or no-op

---

### ⚠️ Infrastructure Assumptions

| Component                   | Assumed Ready | Confidence | Mitigation if False                |
| --------------------------- | ------------- | ---------- | ---------------------------------- |
| Prefect agent               | Yes           | 0.9        | `--legacy-executor` fallback       |
| DVC / lakeFS                | Yes           | 0.8        | Log locally, queue for upload      |
| Prometheus metrics endpoint | Yes           | 0.75       | Store JSON logs if not connected   |
| Streamlit dashboard port    | 8501 free     | 0.6        | Auto-select via `--dashboard-port` |

---

## ✅ STATUS MATRIX (Auto‑generated via `.phase_status.yaml`) (Auto‑generated via `.phase_status.yaml`)

| Checkpoint                      | Status |
| ------------------------------- | ------ |
| Phase 1 complete (refactor)     | ⬜      |
| Phase 2 config/schema validated | ⬜      |
| Phase 3 dry‑run & DAG OK        | ⬜      |
| Phase 4 live run & contracts OK | ⬜      |
| Phase 5 tests ≥ 95 % cov        | ⬜      |
| Phase 6 freeze & tag pushed     | ⬜      |

*(⬜ = pending, 🟩 = done; updated automatically)*

---

### 📜 Change‑Log (v2.1 vs v2.0)

* Escaped back‑reference literals in regex example.
* Added phase‑gated Git branching & `.phase_status.yaml` workflow.
* Integrated Prefect, DVC, Prometheus, Streamlit hooks.
* Added schema\_version to Pydantic models & schemas folder.
* CI coverage threshold (95 %) + test IO sandboxing.
* SHA integrity for `requirements-freeze.txt`.

---

**✔︎ Blueprint v2.1 delivered.**
